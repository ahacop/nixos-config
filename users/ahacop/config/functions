# Use Gitâ€™s colored diff when available
if (( $+commands[git] )); then
  diff() {
    git diff --no-index --color-words "$@"
  }
fi

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
tre() {
  tree -aC -I '.git' --dirsfirst "$@" | less -FRNX
}

# Get colors in manual pages
man() {
  env \
    LESS_TERMCAP_mb=$(printf '\e[1;31m') \
    LESS_TERMCAP_md=$(printf '\e[1;31m') \
    LESS_TERMCAP_me=$(printf '\e[0m') \
    LESS_TERMCAP_se=$(printf '\e[0m') \
    LESS_TERMCAP_so=$(printf '\e[1;44;33m') \
    LESS_TERMCAP_ue=$(printf '\e[0m') \
    LESS_TERMCAP_us=$(printf '\e[1;32m') \
    man "$@"
}

# check if uri is up
isup() {
  local uri=$1

  if curl -s --head --request GET "$uri" | grep "200 OK" >/dev/null; then
    echo "$uri is down"
  else
    echo "$uri is up"
  fi
}

# Determine size of a file or total size of a directory
fs() {
  local arg
  if du -b /dev/null >/dev/null 2>&1; then
    arg=-sbh
  else
    arg=-sh
  fi
  if [[ -n "$@" ]]; then
    du $arg -- "$@"
  else
    du $arg -- .[^.]* *
  fi
}

# Create a data URL from a file
dataurl() {
  local mimeType=$(file -b --mime-type "$1")
  if [[ $mimeType == text/* ]]; then
    mimeType="${mimeType};charset=utf-8"
  fi
  echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')"
}

# UTF-8-encode a string of Unicode symbols
escape() {
  local args=$(printf "%s" "$*" | xxd -p -c1 -u)
  printf "\\x%s" $args
  if [ -t 1 ]; then
    echo ""; # newline
  fi
}

# Decode \x{ABCD}-style Unicode escape sequences
unidecode() {
  perl -e "binmode(STDOUT, ':utf8'); print \"$*\""
  if [ -t 1 ]; then
    echo ""; # newline
  fi
}

# Simplified Git command or git status
g() {
  if [[ $# -gt 0 ]]; then
    git "$@"
  else
    git status
  fi
}

# Lists modified and untracked files
modified_and_untracked_files() {
  git ls-files . --exclude-standard --others --modified
}

# Opens modified and untracked files in Vim
open_modified_and_untracked_in_vim() {
  nvim -p $(modified_and_untracked_files)
}

# Lists files changed from the head
changed_from_head() {
  git diff-tree --no-commit-id --name-only -r HEAD
}

# Opens files changed from the head in Vim
open_changed_from_head_in_vim() {
  nvim -p $(changed_from_head)
}

# Switch projects
p() {
  proj=$(find ~/code -maxdepth 2 \( -type l -o -type d \) -not -name ".*" | sk)
  if [[ -n $proj ]]; then
    cd "$proj"
  fi
}

# Re-encode PDF
reencode_pdf() {
  gs -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -dPDFSETTINGS=/$1 -sOutputFile="$3" "$2"
}

# Remove watermark
remove_gb_wm() {
  convert -gravity SouthEast -region 160x35 -morphology dilate disk +noise Uniform "$1" "$2"
}

