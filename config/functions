function list-i3-keybindings() {
  local config_file="$HOME/.config/i3/config"

  # Calculate maximum key length for alignment
  local max_key_length=$(grep '^bindsym' "$config_file" | awk '{print length($2)}' | sort -n | tail -1)

  # Print keybindings with proper alignment
  grep '^bindsym' "$config_file" | while read -r line; do
    local key=$(echo "$line" | awk '{print $2}')
    local command=$(echo "$line" | cut -d' ' -f3-)
    printf "%-${max_key_length}s -> %s\n" "$key" "$command"
  done
}

function git_pick_from_log() {
  # Check if the number of commits is provided
  if [ -z "$1" ]; then
    echo "Usage: git_pick_from_log <number_of_commits> [branch]"
    return 1
  fi

  local num_commits="$1"
  local branch="${2:-HEAD}"
  local temp_file=$(mktemp)

  # Get the git log for the specified number of commits from the branch and write it to the temp file
  git log --oneline -n "$num_commits" "$branch" > "$temp_file"

  # Open the log in the user's default editor for them to edit
  ${EDITOR:-vi} "$temp_file"

  # After the user saves and exits, extract the SHAs
  local shas=$(awk '{print $1}' "$temp_file" | tac | tr '\n' ' ' | sed 's/ $//')

  # Remove the temporary file
  rm "$temp_file"

  # Output the SHAs in a single line, ready for cherry-pick
  echo "$shas"
}

# Use Gitâ€™s colored diff when available
if (( $+commands[git] )); then
  diff() {
    git diff --no-index --color-words "$@"
  }
fi

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
tre() {
  tree -aC -I '.git' --dirsfirst "$@" | less -FRNX
}

create_dev_flake() {
  local template=$1
  nix flake init --template "github:the-nix-way/dev-templates#$template"
}

# Get colors in manual pages
man() {
  env \
    LESS_TERMCAP_mb=$(printf '\e[1;31m') \
    LESS_TERMCAP_md=$(printf '\e[1;31m') \
    LESS_TERMCAP_me=$(printf '\e[0m') \
    LESS_TERMCAP_se=$(printf '\e[0m') \
    LESS_TERMCAP_so=$(printf '\e[1;44;33m') \
    LESS_TERMCAP_ue=$(printf '\e[0m') \
    LESS_TERMCAP_us=$(printf '\e[1;32m') \
    man "$@"
}

# check if uri is up
isup() {
  local uri=$1

  if curl -s --head --request GET "$uri" | grep "200 OK" >/dev/null; then
    echo "$uri is down"
  else
    echo "$uri is up"
  fi
}

# Determine size of a file or total size of a directory
fs() {
  local arg
  if du -b /dev/null >/dev/null 2>&1; then
    arg=-sbh
  else
    arg=-sh
  fi
  if [[ -n "$@" ]]; then
    du $arg -- "$@"
  else
    du $arg -- .[^.]* *
  fi
}

# Create a data URL from a file
dataurl() {
  local mimeType=$(file -b --mime-type "$1")
  if [[ $mimeType == text/* ]]; then
    mimeType="${mimeType};charset=utf-8"
  fi
  echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')"
}

# UTF-8-encode a string of Unicode symbols
escape() {
  local args=$(printf "%s" "$*" | xxd -p -c1 -u)
  printf "\\x%s" $args
  if [ -t 1 ]; then
    echo ""; # newline
  fi
}

# Decode \x{ABCD}-style Unicode escape sequences
unidecode() {
  perl -e "binmode(STDOUT, ':utf8'); print \"$*\""
  if [ -t 1 ]; then
    echo ""; # newline
  fi
}

# Simplified Git command or git status
g() {
  if [[ $# -gt 0 ]]; then
    git "$@"
  else
    git status
  fi
}

# Lists modified and untracked files
modified_and_untracked_files() {
  git ls-files . --exclude-standard --others --modified
}

# Opens modified and untracked files in Vim
open_modified_and_untracked_in_vim() {
  nvim -p $(modified_and_untracked_files)
}

# Lists files changed from the head
changed_from_head() {
  git diff-tree --no-commit-id --name-only -r HEAD
}

# Opens files changed from the head in Vim
open_changed_from_head_in_vim() {
  nvim -p $(changed_from_head)
}

p() {
  local base_dir=${1:-~/code}
  base_dir=$(realpath "$base_dir")  # Ensure we have the full path
  local proj

  echo $base_dir
  while true; do
    proj=$(find "$base_dir" -maxdepth 2 \( -type l -o -type d \) |
           sed "s|^$base_dir/||" |
           sk |
           sed "s|^|$base_dir/|")
    if [ -n "$proj" ]; then
      cd "$proj"
      break
    fi
  done
}

# Tab completion function remains the same
_p_completion() {
  local base_dir=${1:-~/code}
  local projects
  projects=($(find "$base_dir" -maxdepth 2 \( -type l -o -type d \) | sed "s|^$base_dir/||"))
  _describe 'projects' projects
}

# Register the completion function
compdef _p_completion p

# Re-encode PDF
reencode_pdf() {
  gs -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -dPDFSETTINGS=/$1 -sOutputFile="$3" "$2"
}

# Remove watermark
remove_gb_wm() {
  convert -gravity SouthEast -region 160x35 -morphology dilate disk +noise Uniform "$1" "$2"
}

function edit_diff_files_in_vim() {
    [[ -z "$1" ]] && echo "Usage: git_vim_open_commit <commit-sha>" && return 1
    
    local files=($(git diff-tree --no-commit-id --name-only -r "$1"))
    
    [[ ${#files[@]} -eq 0 ]] && echo "No files found in commit $1" && return 1
    
    vim -p "${files[@]}"
}
