#+title: Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle /Users/ahacop/.emacs.d/init.el :mkdirp yes

* Table of Contents                                                     :TOC:
- [[#package-management][Package Management]]
  - [[#automatic-updates][Automatic Updates]]
- [[#org-mode][Org Mode]]
  - [[#tangle][Tangle]]
  - [[#structure-templates][Structure Templates]]
  - [[#babel][Babel]]
  - [[#table-of-contents-generation][Table of Contents Generation]]
- [[#user-interface][User Interface]]
  - [[#keybinding][Keybinding]]
  - [[#encryption][Encryption]]
  - [[#behavior][Behavior]]
  - [[#fonts][Fonts]]
  - [[#olivetti][Olivetti]]
  - [[#custom][Custom]]
  - [[#themes][Themes]]
  - [[#mode-line][Mode Line]]
  - [[#helpful][Helpful]]
  - [[#which-key][Which Key]]
  - [[#org-bullets][Org Bullets]]
- [[#programming][Programming]]
  - [[#rust][Rust]]
  - [[#haskell][Haskell]]
  - [[#go][Go]]
  - [[#elixir][Elixir]]
  - [[#treesitter][Treesitter]]
- [[#completion][Completion]]
  - [[#history][History]]
  - [[#vertico][Vertico]]
  - [[#orderless][Orderless]]
  - [[#completion-actions][Completion Actions]]
- [[#documents][Documents]]
  - [[#epub][Epub]]
- [[#applications][Applications]]
  - [[#gophergemini][Gopher/Gemini]]
  - [[#email][Email]]
  - [[#web-browser][Web Browser]]
  - [[#pocket][Pocket]]
  - [[#anki][Anki]]
  - [[#dictionary][Dictionary]]
  - [[#rss][RSS]]
- [[#old-init][Old Init]]

* Package Management
#+begin_src emacs-lisp
  (require 'package)
  (setq package-enable-at-startup nil)
  (add-to-list 'package-archives '("melpa" . "http://stable.melpa.org/packages/"))
  (add-to-list 'package-archives '("melpa-unstable" . "http://melpa.org/packages/"))
  (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/"))
  (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
  (package-initialize)

  ;; Install 'use-package' if necessary
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  ;; Enable use-package
  (eval-when-compile
    (require 'use-package))

  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
#+end_src

** Automatic Updates
#+begin_src emacs-lisp
  (use-package auto-package-update
    :custom
    (auto-package-update-interval 7)
    (auto-package-update-prompt-before-update t)
    (auto-package-update-delete-old-versions t)
    (auto-package-update-hide-results t)
    :config
    (auto-package-update-maybe)
    (auto-package-update-at-time "09:00"))
#+end_src

* Org Mode
#+begin_src emacs-lisp
  (use-package org
    :pin org
    :hook (org-mode . auto-fill-mode)
    :bind (("C-c a" . org-agenda)
           ("C-c l" . org-store-link)
           ("C-c c" . org-capture))
    :config
    (setq org-directory "~/code/org")
    (setq org-refile-use-outline-path t)
    (setq org-outline-path-complete-in-steps nil)
    (setq org-refile-targets '(("elfeed.org" :maxlevel . 2)
                               (org-agenda-files :maxlevel . 1)))
    (setq org-default-notes-file (concat org-directory "/inbox.org"))
    (setq org-export-html-postamble nil)
    (setq org-hide-leading-stars t)
    (setq org-startup-folded (quote overview))
    (setq org-startup-indented t)
    (setq org-agenda-start-on-weekday nil)
    (setq org-agenda-files (list "~/code/org"))
    (setq org-src-fontify-natively t)
    (setq org-src-tab-acts-natively t)
    (setq org-src-window-setup 'current-window)
    (setq org-log-done 'time)
    (setq org-capture-templates '(("t" "todo" entry (file+headline "inbox.org" "Inbox")
                                   "* TODO %?\n%U\n%a\n" :clock-in t :clock-resume t)
                                  ("p" "Pocket article" entry (file+headline "inbox.org" "Inbox")
                                   "* TODO Read %a\n%?%U\n" :clock-in t :clock-resume t)
                                  ("a" "Appointment" entry (file+headline "inbox.org" "Inbox")
                                   "* APPT %?\nSCHEDULED: %^t\n")
                                  ("s" "Subscribe")
                                  ("sr" "RSS feed" entry (file+headline "elfeed.org" "Feeds")
                                   "* [[%^{Feed URL}][%^{Feed name}]]")
                                  ("si" "Instagram feed" entry (file+headline "elfeed.org" "Instagram") "* [[http://127.0.0.1:1200/picuki/profile/%^{Instagram Username}][%^{Feed name}]]")
                                  ("sy" "Youtube user" entry (file+headline "elfeed.org" "Youtube") "* [[https://www.youtube.com/feeds/videos.xml?user=%^{Youtube Username}][%^{Feed name}]]")
                                  ("sc" "Youtube channel" entry (file+headline "elfeed.org" "Youtube") "* [[https://www.youtube.com/feeds/videos.xml?channel_id=%^{Youtube Channel ID}][%^{Feed name}]]")
                                  ("g" "german conversation exercise" entry (file "~/code/org/german_conversations.org")
                                   "* %t\n** Conversation\n*** English\n%?\n*** German\n** Review\n*** Google Translation\n** Notes\n")
                                  ))
    )
#+end_src
** Tangle
#+begin_src emacs-lisp
(defun efs/org-babel-tangle-config ()
  (when (string-equal (file-name-directory (buffer-file-name))
                      (expand-file-name "/Users/ahacop/code/dotfiles/emacs.org"))
    ;; Dynamic scoping to the rescue
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle))))

(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))
#+end_src
** Structure Templates
#+begin_src emacs-lisp
  (with-eval-after-load 'org
    ;; This is needed as of Org 9.2
    (require 'org-tempo)

    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp")))
#+end_src
** Babel
#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (org-babel-do-load-languages
        'org-babel-load-languages
        '((emacs-lisp . t))))
#+end_src
** Table of Contents Generation
#+begin_src emacs-lisp
  (use-package toc-org
    :hook (org-mode . toc-org-mode))
#+end_src
* User Interface
#+begin_src emacs-lisp
  (setq ring-bell-function 'ignore)
  (global-set-key (kbd "C-w") 'backward-kill-word)
#+end_src
** Keybinding
#+begin_src emacs-lisp
  ;; Make ESC quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  (use-package general
    :disabled
    :after evil
    :config
    (general-create-definer efs/leader-keys
                            :keymaps '(normal insert visual emacs)
                            :prefix "SPC"
                            :global-prefix "C-SPC")

    (efs/leader-keys
     "t"  '(:ignore t :which-key "toggles")
     "tt" '(counsel-load-theme :which-key "choose theme")
     "fde" '(lambda () (interactive) (find-file (expand-file-name "~/.emacs.d/Emacs.org")))))


#+end_src
** Encryption
#+begin_src emacs-lisp
   ;(require 'epa-file)
   ;(setq epa-file-select-keys nil)
   ;(setq epa-file-encrypt-to '("ara@hacopian.de"))

   ;(setq epg-gpg-program "gpg2")
   ;(setq auth-sources '((:source "~/.authinfo.gpg")))
   ;(setenv "GPG_AGENT_INFO" nil)
   ;(setq epa-pinentry-mode 'loopback)
   ;(setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")



  (require 'epa-file)
(require 'sendmail)
(epa-file-enable)
(setq epa-pinentry-mode 'loopback)
(auth-source-forget-all-cached)

;; don't keep message compose buffers around after sending:
(setq message-kill-buffer-on-exit t)
(setq       message-sendmail-f-is-evil t)
;; send function:
(setq send-mail-function 'sendmail-send-it
      message-send-mail-function 'message-send-mail-with-sendmail)
(setq       message-sendmail-extra-arguments '("--read-envelope-from"))
;; send program:
;; this is exeranal. remember we installed it before.
(setq sendmail-program (executable-find "msmtp"))

(defun timu/set-msmtp-account ()
  (if (message-mail-p)
      (save-excursion
        (let*
            ((from (save-restriction
                     (message-narrow-to-headers)
                     (message-fetch-field "from")))
             (account
              (cond
               ((string-match "ara@hacopian.de" from) "hacopian")
               ((string-match "ara@baremetrics.com" from) "baremetrics")
               ((string-match "ara@tehanu.net" from) "tehanu"))))
          (setq message-sendmail-extra-arguments (list '"-a" account))))))

(add-hook 'message-send-mail-hook 'timu/set-msmtp-account)

;; mu4e cc & bcc
;; this is custom as well
(add-hook 'mu4e-compose-mode-hook
          (defun timu/add-cc-and-bcc ()
            "My Function to automatically add Cc & Bcc: headers.
    This is in the mu4e compose mode."
            (save-excursion (message-add-header "Cc:\n"))
            (save-excursion (message-add-header "Bcc:\n"))))


#+end_src
** Behavior
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
  (setq confirm-kill-emacs 'y-or-n-p) ; y and n instead of yes and no when quitting
  (fset 'yes-or-no-p 'y-or-n-p) ; y and n instead of yes and no everywhere else
  (setq cursor-in-non-selected-windows t)
  (setq inhibit-startup-screen t)
  (setq initial-scratch-message nil)
  (setq make-backup-files nil)
  (blink-cursor-mode 0)
  (global-auto-revert-mode t)
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
  (setq browse-url-browser-function 'eww-browse-url)
  (setq browse-url-chromium-program "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome")
  (setq browse-url-chrome-program "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome")

  (use-package exec-path-from-shell
    :config
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize)))
#+end_src
** Fonts
#+begin_src emacs-lisp
  (set-face-attribute 'default nil :family "Input Mono" :height 240)
  (set-face-attribute 'fixed-pitch nil :family "Input Mono" :height 240)
  (set-face-attribute 'variable-pitch nil :family "Input Mono" :height 240)

  (when (member "Apple Emoji" (font-family-list))
  (set-fontset-font
    t 'symbol (font-spec :family "Apple Emoji") nil 'prepend))
    ;; t 'symbol (font-spec :family "Segoe UI Emoji") nil 'prepend))
#+end_src
** Olivetti
#+begin_src emacs-lisp
(use-package olivetti)
#+end_src
** Custom
#+begin_src emacs-lisp
  (defun ah/eww-readable ()
    "Use more opinionated `eww-readable'.

  Set width is set to `current-fill-column'.  Adjust size of
  images."
    (interactive)
    (let ((shr-width (current-fill-column))
          (shr-max-image-proportion 0.35))
      (eww-readable)))

  (menu-bar-mode -1)
  (when (fboundp 'tool-bar-mode)
    (tool-bar-mode -1))
  (when (fboundp 'scroll-bar-mode)
    (scroll-bar-mode -1))
  (when (fboundp 'horizontal-scroll-bar-mode)
    (horizontal-scroll-bar-mode -1))


  (autoload 'zap-up-to-char "misc"
    "Kill up to, but not including ARGth occurrence of CHAR." t)

  (global-set-key (kbd "M-z") 'zap-up-to-char)

  (show-paren-mode 1)
  (setq-default indent-tabs-mode nil)
  (setq require-final-newline t)
#+end_src
** Themes
*** Modus
#+begin_src emacs-lisp
  (use-package emacs
    :init
    ;; Add all your customizations prior to loading the themes
    (setq modus-themes-italic-constructs t
          modus-themes-distinct-org-blocks t
          modus-themes-rainbow-headings t
          modus-themes-bold-constructs t
          modus-themes-region '(bg-only no-extend))
    :config
    ;; Load the theme of your choice:
    (load-theme 'modus-vivendi) ;; OR (load-theme 'modus-vivendi)
    :bind ("<f5>" . modus-themes-toggle))
#+end_src
** Mode Line
#+begin_src emacs-lisp
  (use-package all-the-icons)

  (setq display-time-format "%l:%M %p %b %y"
        display-time-default-load-average nil)

  (use-package minions
    :after doom-modeline
    :hook (doom-modeline-mode . minions-mode))

  ;; (use-package doom-modeline
  ;;   :ensure t
  ;;   :custom-face
  ;;       (mode-line ((t (:height 0.85))))
  ;;       (mode-line-inactive ((t (:height 0.85))))
  ;;   :custom
  ;;   (doom-modeline-height 6)
  ;;   (doom-modeline-bar-width 6)
  ;;   (doom-modeline-mu4e nil)
  ;;   (doom-modeline-persp-name nil)
  ;;   (doom-modeline-minor-modes t)
  ;;   (doom-modeline-buffer-file-name-style 'truncate-except-project)
  ;;   (doom-modeline-major-mode-icon nil)
  ;;   :init (doom-modeline-mode 1))

  ;; (use-package doom-modeline
  ;;   :after all-the-icons
  ;;   :hook (after-init . doom-modeline-init)
  ;;   :custom-face
  ;;   (mode-line ((t (:height 0.85))))
  ;;   (mode-line-inactive ((t (:height 0.85))))
  ;;   :custom
  ;;   (doom-modeline-height 6)
  ;;   (doom-modeline-bar-width 6)
  ;;   (doom-modeline-lsp t)
  ;;   (doom-modeline-github nil)
  ;;   (doom-modeline-mu4e nil)
  ;;   (doom-modeline-irc t)
  ;;   (doom-modeline-minor-modes t)
  ;;   (doom-modeline-persp-name nil)
  ;;   (doom-modeline-buffer-file-name-style 'truncate-except-project)
  ;;   (doom-modeline-major-mode-icon nil))
#+end_src
** Helpful
#+begin_src emacs-lisp
(use-package helpful
  :commands (helpful-callable helpful-variable helpful-command helpful-key)
  :bind
  ([remap describe-command] . helpful-command)
  ([remap describe-key] . helpful-key))
#+end_src
** Which Key
#+begin_src emacs-lisp
(use-package which-key
  :defer 0
  :diminish which-key-mode
  :config
  (which-key-mode)
  (setq which-key-idle-delay 1))
#+end_src
** Org Bullets
#+begin_src emacs-lisp
  (use-package org-bullets
    :after (org-mode)
    :hook org-mode)
#+end_src
* Programming
** Rust
#+begin_src emacs-lisp
(use-package rust-mode)
#+end_src
** Haskell
#+begin_src emacs-lisp
(use-package haskell-mode)
#+end_src
** Go
#+begin_src emacs-lisp
(use-package go-mode)
#+end_src
** Elixir
#+begin_src emacs-lisp
(use-package elixir-mode)
#+end_src
** Treesitter
#+begin_src emacs-lisp
  (use-package tree-sitter
    :config
    (global-tree-sitter-mode)
    (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)
    )
  (use-package tree-sitter-langs
    :after (tree-sitter))
#+end_src
* Completion
** History
#+begin_src emacs-lisp
  (use-package savehist
    :config
    (setq history-length 25)
    (savehist-mode 1))
#+end_src
** Vertico
#+begin_src emacs-lisp
  (use-package vertico
    ;; :straight '(vertico :host github
    ;;                     :repo "minad/vertico"
    ;;                     :branch "main")
    :bind (:map vertico-map
                ("?" . minibuffer-completion-help)
                ("M-RET" . minibuffer-force-complete-and-exit)
                ("M-TAB" . minibuffer-complete))
    :init
    (vertico-mode))
                ;; ("C-j" . vertico-next)
                ;; ("C-k" . vertico-previous)
                ;; ("C-f" . vertico-exit))
    ;;        :map minibuffer-local-map
    ;;        ("M-h" . dw/minibuffer-backward-kill))
    ;; :custom
    ;; (vertico-cycle t)
    ;; :custom-face
    ;; (vertico-current ((t (:background "#3a3f5a"))))
#+end_src

** Orderless
#+begin_src emacs-lisp
  (use-package orderless
    :init
    (setq completion-styles '(orderless basic)
          completion-category-defaults nil
          completion-category-overrides '((file (styles partial-completion)))))
#+end_src
** Completion Actions
#+begin_src emacs-lisp
  (use-package embark
    :bind (("C-S-a" . embark-act)
           :map minibuffer-local-map
           ("C-d" . embark-act))
    :config

    ;; Show Embark actions via which-key
    (setq embark-action-indicator
          (lambda (map)
            (which-key--show-keymap "Embark" map nil nil 'no-paging)
            #'which-key--hide-popup-ignore-command)
          embark-become-indicator embark-action-indicator))
#+end_src
* Documents
** Epub
#+begin_src emacs-lisp
(use-package nov
  :pin melpa-unstable
  :init
  (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
  (setq nov-unzip-program "/usr/bin/unzip")

  (setq nov-text-width 72)

  ;; More flexible filling
  ;; See https://depp.brause.cc/nov.el/
  ;; (setq nov-text-width t)
  ;; (setq visual-fill-column-center-text t)
  ;; (add-hook 'nov-mode-hook 'visual-line-mode)
  ;; (add-hook 'nov-mode-hook 'visual-fill-column-mode)
  )
#+end_src
* Applications
** Gopher/Gemini
*** Elpher
#+begin_src emacs-lisp
  (use-package elpher)
#+end_src
** Email
*** SMTP
#+begin_src emacs-lisp
;  (use-package smtpmail
;    :ensure nil
;    :init
;    (setq send-mail-function 'smtpmail-send-it)
;    (setq smtpmail-smtp-server "smtp.fastmail.com")
;    (setq smtpmail-stream-type 'ssl)
;    (setq smtpmail-debug-info t)
;   (setq smtpmail-smtp-service 465)
;    (setq user-mail-address "ara@hacopian.de")
;    (setq user-full-name  "Ara Hacopian"))
#+end_src
*** Mu4e
#+begin_src emacs-lisp
  (use-package mu4e
  :ensure nil
  :load-path "/usr/local/share/emacs/site-lisp/mu/mu4e"
  ;; :hook ((mu4e-view-mode . (lambda ()
  ;;                           (ah/make-readable)
  ;;                           (mu4e-view-fill-long-lines)))
  ;;        (mu4e-compose-mode-hook . (lambda () (set-fill-column 80))))
  ;;:bind ((:map mu4e-headers-mode-map ("d" . "moTrash"))
   ;;     (:map mu4e-view-mode-map ("d" . "moTrash")))
  :config
  (add-to-list 'mu4e-view-actions '("ViewInBrowser" . mu4e-action-view-in-browser) t)
  (add-to-list 'mu4e-view-actions '("XWidget View" . mu4e-action-view-with-xwidget) t)
  (setq mu4e-contexts
           `(
           ,(make-mu4e-context
                :name "Baremetrics"
                :enter-func (lambda () (mu4e-message "Entering Baremetrics context"))
                :leave-func (lambda () (mu4e-message "Leaving Baremetrics context"))
                :match-func (lambda (msg)
                              (when msg (mu4e-message-contact-field-matches msg :to "ara@baremetrics.com")))
                :vars '((mu4e-compose-signature . nil)
                        (user-mail-address . "ara@baremetrics.com")
                        (mu4e-compose-reply-to-address . "ara@baremetrics.com")
                        (mu4e-drafts-folder . "/baremetrics/[Gmail]/Drafts")
                        (mu4e-refile-folder . "/baremetrics/[Gmail]/All Mail")
                        (mu4e-sent-folder . "/baremetrics/[Gmail]/Sent Mail")
                        (mu4e-trash-folder . "/baremetrics/[Gmail]/Trash")
                        )
                )
           ,(make-mu4e-context
                :name "Personal"
                :enter-func (lambda () (mu4e-message "Entering Personal context"))
                :leave-func (lambda () (mu4e-message "Leaving Personal context"))
                :match-func (lambda (msg)
                              (when msg (mu4e-message-contact-field-matches msg :to "ara@hacopian.de")))
                :vars '((mu4e-compose-signature . nil)
                        (user-mail-address . "ara@hacopian.de")
                        (mu4e-compose-reply-to-address . "ara@hacopian.de")
                        (mu4e-drafts-folder . "/fastmail/Drafts")
                        (mu4e-refile-folder . "/fastmail/Archive")
                        (mu4e-sent-folder . "/fastmail/Sent")
                        (mu4e-trash-folder . "/fastmail/Trash")
                        )
                )
              ,(make-mu4e-context
                :name "Tehanu"
                :enter-func (lambda () (mu4e-message "Entering Tehanu context"))
                :leave-func (lambda () (mu4e-message "Leaving Tehanu context"))
                ;; we match based on the contact-fields of the message
                :match-func (lambda (msg)
                              (when msg (mu4e-message-contact-field-matches msg :to "ara@tehanu.net")))
                :vars '(
                        (mu4e-compose-signature . (concat
                     "Ara Hacopian\n"
                     "Tehanu UG (haftungsbeschränkt) • Amtsgericht Berlin-Charlottenburg • HRB 201976 B • Geschäftsführer: Herr Ara Hacopian\n")
                                                )
                        (user-mail-address . "ara@tehanu.net")
                        (mu4e-compose-reply-to-address . "ara@tehanu.net")
                        (mu4e-drafts-folder . "/fastmail/Drafts")
                        (mu4e-refile-folder . "/fastmail/Archive")
                        (mu4e-sent-folder . "/fastmail/Sent")


                         (mu4e-trash-folder . "/fastmail/Trash"))
                )
              )
           )

         (defun ah/mu4e-action-view-in-default-browser (msg)


           (setq browse-url-generic-program 'browse-url-chrome)
           (mu4e-action-view-in-browser msg)
           )

         (add-to-list 'mu4e-view-actions '("work email in browser" . ah/mu4e-action-view-in-default-browser) t)
  :init
      (setq
      mu4e-get-mail-command (concat (executable-find "mbsync") " -aV")
      mue4e-headers-skip-duplicates  t
      mu4e-view-show-images t
      mu4e-view-show-addresses t
      mu4e-compose-format-flowed nil
      mu4e-date-format "%y/%m/%d"
      mu4e-headers-date-format "%Y/%m/%d"
      mu4e-change-filenames-when-moving t
      mu4e-attachments-dir "~/Downloads"
      mu4e-maildir-shortcuts
           '(("/fastmail/INBOX"     . ?i)
             ("/fastmail/Archive"   . ?a)
             ("/fastmail/Sent"      . ?s)
             ("/baremetrics/INBOX"  . ?b))
      mu4e-confirm-quit nil
      mu4e-headers-date-format "%Y-%m-%d %H:%M"
      mu4e-update-interval 300
      mu4e-view-image-max-width 600
      mu4e-view-prefer-html nil
      message-kill-buffer-on-exit t
      mu4e-headers-toggle-threading nil
      mu4e-view-show-addresses t
      mu4e-maildir       "~/Maildir")
   )
    ;; (use-package mu4e
    ;;   :ensure nil
    ;;   :load-path "/run/current-system/sw/share/emacs/site-lisp/mu4e/"
    ;;   :hook ((mu4e-view-mode . (lambda ()
    ;;                             (ah/make-readable)
    ;;                             (mu4e-view-fill-long-lines)))
    ;;          (mu4e-compose-mode-hook . (lambda () (set-fill-column 80))))
    ;;   :config
    ;;   (defun ah/mu4e-action-view-in-default-browser (msg)
    ;;     (browse-url-firefox (concat "file://" (mu4e~write-body-to-html msg))))

    ;;   (add-to-list 'mu4e-view-actions '("html in browser" . ah/mu4e-action-view-in-default-browser) t)
    ;;   (setq mu4e-contexts
    ;;         `( ,(make-mu4e-context
    ;;              :name "Personal"
    ;;              :enter-func (lambda () (mu4e-message "Entering Personal context"))
    ;;              :leave-func (lambda () (mu4e-message "Leaving Personal context"))
    ;;              ;; we match based on the contact-fields of the message
    ;;              :match-func (lambda (msg)
    ;;                            (when msg (mu4e-message-contact-field-matches msg :to "ara@hacopian.de")))
    ;;              :vars '((mu4e-compose-signature . nil)
    ;;                      (user-mail-address . "ara@hacopian.de")
    ;;                      (mu4e-compose-reply-to-address . "ara@hacopian.de")))

    ;;            ,(make-mu4e-context
    ;;              :name "Tehanu"
    ;;              :enter-func (lambda () (mu4e-message "Entering Tehanu context"))
    ;;              :leave-func (lambda () (mu4e-message "Leaving Tehanu context"))
    ;;              ;; we match based on the contact-fields of the message
    ;;              :match-func (lambda (msg)
    ;;                            (when msg (mu4e-message-contact-field-matches msg :to "ara@tehanu.net")))
    ;;              :vars '((mu4e-compose-signature .
    ;;                 (concat
    ;;                   "Ara Hacopian\n"
    ;;                   "Tehanu UG (haftungsbeschränkt) • Amtsgericht Berlin-Charlottenburg • HRB 201976 B • Geschäftsführer: Herr Ara Hacopian\n"))
    ;;                      (user-mail-address . "ara@tehanu.net")
    ;;                      (mu4e-compose-reply-to-address . "ara@tehanu.net")))))

    ;;   :init
    ;;   (setq mail-user-agent 'mu4e-user-agent)
    ;;   (setq mu4e-maildir-shortcuts
    ;;         '(("/fastmail/INBOX"     . ?i)
    ;;           ("/fastmail/Archive"   . ?a)
    ;;           ("/fastmail/Sent"      . ?s)))
    ;;   (setq mu4e-get-mail-command "killall mbsync; mbsync fastmail")
    ;;   (setq mu4e-attachment-dir "~/Downloads")
    ;;   (setq mu4e-change-filenames-when-moving t)
    ;;   (setq mu4e-confirm-quit nil)
    ;;   (setq mu4e-headers-date-format "%Y-%m-%d %H:%M")
    ;;   (setq mu4e-maildir "~/Maildir")
    ;;   (setq mu4e-mu-binary "/run/current-system/sw/bin/mu")
    ;;   (setq mu4e-refile-folder "/fastmail/Archive")
    ;;   (setq mu4e-drafts-folder "/fastmail/Drafts")
    ;;   (setq mu4e-sent-folder "/fastmail/Sent")
    ;;   (setq mu4e-sent-messages-behavior 'sent)
    ;;   (setq mu4e-trash-folder "/fastmail/Trash")
    ;;   (setq mu4e-headers-fields '((:human-date . 16)
    ;;                               (:flags . 6)
    ;;                               (:from-or-to . 18)
    ;;                               (:subject . nil)))
    ;;   (setq mu4e-update-interval 300)
    ;;   (setq mu4e-view-image-max-width 600)
    ;;   (setq mu4e-view-prefer-html nil)
    ;;   (setq mu4e-compose-format-flowed t)
    ;;   (setq fill-flowed-encode-column 998)
    ;;   (setq visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow))
    ;;   (setq message-kill-buffer-on-exit t)
    ;;   (setq mu4e-headers-toggle-threading nil)
    ;;   (setq mu4e-view-show-addresses t))

    ;; (use-package org-mu4e
    ;;   :ensure nil
    ;;   :after (mu4e)
    ;;   :load-path "/opt/homebrew/Cellar/mu/1.10.5/share/emacs/site-lisp/mu/mu4e"
    ;;   :init
    ;;   (setq org-mu4e-link-query-in-headers-mode nil))
#+end_src
** Web Browser
*** Eww
#+begin_src emacs-lisp
  (use-package eww
    :defer t
    :bind (:map eww-mode-map
                ("o" . olivetti-mode)
                ("r" . ah/eww-readable))
    :init
    (setq shr-use-colors nil)
    (setq shr-use-fonts nil)
    (setq shr-max-image-proportion 0.6)
    (setq shr-image-animate nil)
    (setq shr-width nil)
    (setq shr-discard-aria-hidden t)
    (setq shr-cookie-policy nil))
#+end_src

*** Syntax Highlighting in Eww
#+begin_src emacs-lisp
(use-package language-detection
  :config
  (defun eww-tag-pre (dom)
    (let ((shr-folding-mode 'none)
          (shr-current-font 'default))
      (shr-ensure-newline)
      (insert (eww-fontify-pre dom))
      (shr-ensure-newline)))

  (defun eww-fontify-pre (dom)
    (with-temp-buffer
      (shr-generic dom)
      (let ((mode (eww-buffer-auto-detect-mode)))
        (when mode
          (eww-fontify-buffer mode)))
      (buffer-string)))

  (defun eww-fontify-buffer (mode)
    (delay-mode-hooks (funcall mode))
    (font-lock-default-function mode)
    (font-lock-default-fontify-region (point-min)
                                      (point-max)
                                      nil))

  (defun eww-buffer-auto-detect-mode ()
    (let* ((map '((ada ada-mode)
                  (awk awk-mode)
                  (c c-mode)
                  (cpp c++-mode)
                  (clojure clojure-mode lisp-mode)
                  (csharp csharp-mode java-mode)
                  (css css-mode)
                  (dart dart-mode)
                  (delphi delphi-mode)
                  (emacslisp emacs-lisp-mode)
                  (erlang erlang-mode)
                  (fortran fortran-mode)
                  (fsharp fsharp-mode)
                  (go go-mode)
                  (groovy groovy-mode)
                  (haskell haskell-mode)
                  (html html-mode)
                  (java java-mode)
                  (javascript javascript-mode)
                  (json json-mode javascript-mode)
                  (latex latex-mode)
                  (lisp lisp-mode)
                  (lua lua-mode)
                  (matlab matlab-mode octave-mode)
                  (objc objc-mode c-mode)
                  (perl perl-mode)
                  (php php-mode)
                  (prolog prolog-mode)
                  (python python-mode)
                  (r r-mode)
                  (ruby ruby-mode)
                  (rust rust-mode)
                  (scala scala-mode)
                  (shell shell-script-mode)
                  (smalltalk smalltalk-mode)
                  (sql sql-mode)
                  (swift swift-mode)
                  (visualbasic visual-basic-mode)
                  (xml sgml-mode)))
           (language (language-detection-string
                      (buffer-substring-no-properties (point-min) (point-max))))
           (modes (cdr (assoc language map)))
           (mode (cl-loop for mode in modes
                          when (fboundp mode)
                          return mode)))
      (message (format "%s" language))
      (when (fboundp mode)
        mode)))

  (setq shr-external-rendering-functions
        '((pre . eww-tag-pre))))
#+end_src
** Pocket
#+begin_src emacs-lisp
  (use-package pocket-reader
    :pin melpa-unstable
    :custom
    (pocket-reader-open-url-default-function #'eww)
    (reader-pop-to-url-default-function #'eww))
#+end_src
** Anki
#+begin_src emacs-lisp
  (use-package anki
  :defer t
  :load-path "~/.emacs.d/lisp/anki/"
  :init
  (add-hook 'anki-mode-hook #'shrface-mode)
  (add-hook 'anki-card-mode-hook #'shrface-mode)
  (autoload 'anki "anki")
  (autoload 'anki-browser "anki")
  (autoload 'anki-list-decks "anki")
  :config
  ;; (require 'shrface) ; If you use shrface, require it here
  (setq anki-shr-rendering-functions (append anki-shr-rendering-functions shr-external-rendering-functions))
  (setq sql-sqlite-program "/usr/bin/sqlite3")
  ;; Set up the collection directory, which should contain a file - collection.anki2 and a folder - collection.media
  (setq anki-collection-dir "/Users/ahacop/Library/Application Support/Anki2/User 1/"))
#+end_src
** Dictionary
*** SDCV
#+begin_src emacs-lisp
(use-package sdcv
  :bind (("C-x t C-d" . sdcv-search-input)
         ("C-x t d" . sdcv-search-pointer+)))
#+end_src
** RSS
*** Elfeed
#+begin_src emacs-lisp
  (use-package elfeed-webkit
    :ensure
    :after elfeed)

    (use-package elfeed
      :hook (elfeed-show-mode . (lambda () (setq-local shr-width (current-fill-column))))
      :bind (:map elfeed-show-mode-map
            ("&" . ah/elfeed-show-visit)
            ("m" . ah/elfeed-show-stream-media)
            ("o" . olivetti-mode)
            :map elfeed-search-mode-map
            ("h" . ah/elfeed-search-reset-filter)
            ("l" . ah/elfeed-switch-to-log)
            ("t" . ah/elfeed-toggle-filter-youtube)
            ("i" . ah/elfeed-toggle-filter-instagram)
            ("j" . next-line)
            ("k" . previous-line))
      :init
      (setq elfeed-search-filter "+unread @2-months-ago ")
      :config
      (defun ah/elfeed-show-visit ()
        (interactive)
        (let ((link (elfeed-entry-link elfeed-show-entry)))
          (when link
            (message "Sent to browser: %s" link)
            (browse-url-firefox link))))

      (defun ah/elfeed-search-reset-filter
          (interactive)
        (elfeed-search-set-filter (default-value 'elfeed-search-filter)))

      (defun ah/elfeed-switch-to-log ()
        (interactive)
        (switch-to-buffer (elfeed-log-buffer)))

      (defun ah/elfeed-toggle-filter-youtube ()
        (interactive)
        (cl-macrolet ((re (re rep str) `(replace-regexp-in-string ,re ,rep ,str)))
          (elfeed-search-set-filter
           (cond
            ((string-match-p "-youtube" elfeed-search-filter)
             (re " *-youtube" " +youtube" elfeed-search-filter))
            ((string-match-p "\\+youtube" elfeed-search-filter)
             (re " *\\+youtube" " -youtube" elfeed-search-filter))
            ((concat elfeed-search-filter " -youtube"))))))

      (defun ah/elfeed-toggle-filter-instagram ()
        (interactive)
        (cl-macrolet ((re (re rep str) `(replace-regexp-in-string ,re ,rep ,str)))
          (elfeed-search-set-filter
           (cond
            ((string-match-p "-instagram" elfeed-search-filter)
             (re " *-instagram" " +instagram" elfeed-search-filter))
            ((string-match-p "\\+instagram" elfeed-search-filter)
             (re " *\\+instagram" " -instagram" elfeed-search-filter))
            ((concat elfeed-search-filter " -instagram"))))))

      (defface elfeed-youtube
        '((t :foreground "#f9f"))
        "Marks YouTube videos in Elfeed."
        :group 'elfeed)

      (push '(youtube elfeed-youtube) elfeed-search-face-alist)

      (defface elfeed-instagram
        '((t :foreground "#0ff"))
        "Marks Instagram feeds in Elfeed."
        :group 'elfeed)

      (push '(instagram elfeed-instagram) elfeed-search-face-alist)

      (defun ah/elfeed-show-stream-media ()
        (interactive)
        (start-process "vlc" nil "vlc" "" (elfeed-entry-link elfeed-show-entry)))
      )
#+end_src
**** Define feed in Org document
#+begin_src emacs-lisp
  (use-package elfeed-org
    :config (elfeed-org)
    :init (setq rmh-elfeed-org-files (list "~/code/org/elfeed.org")))
#+end_src
**** Elfeed-tube
#+begin_src emacs-lisp
  (use-package elfeed-tube
    :after elfeed
    :demand t
    :config
    ;; (setq elfeed-tube-auto-save-p nil) ; default value
    ;; (setq elfeed-tube-auto-fetch-p t)  ; default value
    (elfeed-tube-setup)

    :bind (:map elfeed-show-mode-map
                ("F" . elfeed-tube-fetch)
                ([remap save-buffer] . elfeed-tube-save)
                :map elfeed-search-mode-map
                ("F" . elfeed-tube-fetch)
                ([remap save-buffer] . elfeed-tube-save)))
  (use-package elfeed-tube-mpv
    :bind (:map elfeed-show-mode-map
                ("C-c C-f" . elfeed-tube-mpv-follow-mode)
                ("C-c C-w" . elfeed-tube-mpv-where)))
#+end_src
* Old Init

(setq package-enable-at-startup nil)

(use-package better-defaults
  :config
  (setq shr-width 70)
  (setq shr-max-image-proportion 0.70)

  (setq ns-use-srgb-colorspace nil)

  (setq-default indent-tabs-mode nil)
  (setq tab-width 2)
  (setq js-indent-level 2)
  (setq css-indent-offset 2)
  (setq-default c-basic-offset 2)
  (setq c-basic-offset 2)
  (setq-default tab-width 2)
  (setq-default c-basic-indent 2)
  (setq-default indent-tabs-mode nil)

  (setq echo-keystrokes 0.1) ; Show keystrokes right away, don't show the message in the scratch buffer

  (delete-selection-mode 1)


  (global-set-key (kbd "M-o") 'other-window)
  (global-set-key (kbd "C-c m") 'mu4e)
  (global-set-key (kbd "C-c e") 'elfeed)


  (setq confirm-kill-processes nil)

  (global-set-key (kbd "RET") 'newline-and-indent)



(setenv "PKG_CONFIG_PATH" "/usr/local/Cellar/zlib/1.2.8/lib/pkgconfig:/usr/local/lib/pkgconfig:/opt/X11/lib/pkgconfig")
